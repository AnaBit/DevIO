/*
 * Generated by gdbus-codegen 2.50.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __LTEBUS_H__
#define __LTEBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for dev.middleware.lte */

#define LTE_BUS_TYPE_DEV_MIDDLEWARE_LTE (lte_bus_dev_middleware_lte_get_type ())
#define LTE_BUS_DEV_MIDDLEWARE_LTE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LTE_BUS_TYPE_DEV_MIDDLEWARE_LTE, LteBusDevMiddlewareLte))
#define LTE_BUS_IS_DEV_MIDDLEWARE_LTE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LTE_BUS_TYPE_DEV_MIDDLEWARE_LTE))
#define LTE_BUS_DEV_MIDDLEWARE_LTE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), LTE_BUS_TYPE_DEV_MIDDLEWARE_LTE, LteBusDevMiddlewareLteIface))

struct _LteBusDevMiddlewareLte;
typedef struct _LteBusDevMiddlewareLte LteBusDevMiddlewareLte;
typedef struct _LteBusDevMiddlewareLteIface LteBusDevMiddlewareLteIface;

struct _LteBusDevMiddlewareLteIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_close_cellular_data) (
    LteBusDevMiddlewareLte *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_dial) (
    LteBusDevMiddlewareLte *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_number);

  gboolean (*handle_handup) (
    LteBusDevMiddlewareLte *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_mobile_base_station_time) (
    LteBusDevMiddlewareLte *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_open_cellular_data) (
    LteBusDevMiddlewareLte *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_build_time) (LteBusDevMiddlewareLte *object);

  guchar  (*get_cellular_status) (LteBusDevMiddlewareLte *object);

  guchar  (*get_dial_status) (LteBusDevMiddlewareLte *object);

  const gchar * (*get_hardware_model) (LteBusDevMiddlewareLte *object);

  const gchar * (*get_iccid) (LteBusDevMiddlewareLte *object);

  const gchar * (*get_phone_num) (LteBusDevMiddlewareLte *object);

  const gchar * (*get_verison) (LteBusDevMiddlewareLte *object);

  void (*cellular_status_signal) (
    LteBusDevMiddlewareLte *object,
    guchar arg_cellular_status);

  void (*dial_stauts_signal) (
    LteBusDevMiddlewareLte *object,
    guchar arg_dial_status,
    const gchar *arg_dial_number);

};

GType lte_bus_dev_middleware_lte_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *lte_bus_dev_middleware_lte_interface_info (void);
guint lte_bus_dev_middleware_lte_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void lte_bus_dev_middleware_lte_complete_mobile_base_station_time (
    LteBusDevMiddlewareLte *object,
    GDBusMethodInvocation *invocation,
    const gchar *time);

void lte_bus_dev_middleware_lte_complete_dial (
    LteBusDevMiddlewareLte *object,
    GDBusMethodInvocation *invocation,
    gboolean res);

void lte_bus_dev_middleware_lte_complete_handup (
    LteBusDevMiddlewareLte *object,
    GDBusMethodInvocation *invocation);

void lte_bus_dev_middleware_lte_complete_open_cellular_data (
    LteBusDevMiddlewareLte *object,
    GDBusMethodInvocation *invocation,
    gboolean res);

void lte_bus_dev_middleware_lte_complete_close_cellular_data (
    LteBusDevMiddlewareLte *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void lte_bus_dev_middleware_lte_emit_dial_stauts_signal (
    LteBusDevMiddlewareLte *object,
    guchar arg_dial_status,
    const gchar *arg_dial_number);

void lte_bus_dev_middleware_lte_emit_cellular_status_signal (
    LteBusDevMiddlewareLte *object,
    guchar arg_cellular_status);



/* D-Bus method calls: */
void lte_bus_dev_middleware_lte_call_mobile_base_station_time (
    LteBusDevMiddlewareLte *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean lte_bus_dev_middleware_lte_call_mobile_base_station_time_finish (
    LteBusDevMiddlewareLte *proxy,
    gchar **out_time,
    GAsyncResult *res,
    GError **error);

gboolean lte_bus_dev_middleware_lte_call_mobile_base_station_time_sync (
    LteBusDevMiddlewareLte *proxy,
    gchar **out_time,
    GCancellable *cancellable,
    GError **error);

void lte_bus_dev_middleware_lte_call_dial (
    LteBusDevMiddlewareLte *proxy,
    const gchar *arg_number,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean lte_bus_dev_middleware_lte_call_dial_finish (
    LteBusDevMiddlewareLte *proxy,
    gboolean *out_res,
    GAsyncResult *res,
    GError **error);

gboolean lte_bus_dev_middleware_lte_call_dial_sync (
    LteBusDevMiddlewareLte *proxy,
    const gchar *arg_number,
    gboolean *out_res,
    GCancellable *cancellable,
    GError **error);

void lte_bus_dev_middleware_lte_call_handup (
    LteBusDevMiddlewareLte *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean lte_bus_dev_middleware_lte_call_handup_finish (
    LteBusDevMiddlewareLte *proxy,
    GAsyncResult *res,
    GError **error);

gboolean lte_bus_dev_middleware_lte_call_handup_sync (
    LteBusDevMiddlewareLte *proxy,
    GCancellable *cancellable,
    GError **error);

void lte_bus_dev_middleware_lte_call_open_cellular_data (
    LteBusDevMiddlewareLte *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean lte_bus_dev_middleware_lte_call_open_cellular_data_finish (
    LteBusDevMiddlewareLte *proxy,
    gboolean *out_res,
    GAsyncResult *res,
    GError **error);

gboolean lte_bus_dev_middleware_lte_call_open_cellular_data_sync (
    LteBusDevMiddlewareLte *proxy,
    gboolean *out_res,
    GCancellable *cancellable,
    GError **error);

void lte_bus_dev_middleware_lte_call_close_cellular_data (
    LteBusDevMiddlewareLte *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean lte_bus_dev_middleware_lte_call_close_cellular_data_finish (
    LteBusDevMiddlewareLte *proxy,
    GAsyncResult *res,
    GError **error);

gboolean lte_bus_dev_middleware_lte_call_close_cellular_data_sync (
    LteBusDevMiddlewareLte *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *lte_bus_dev_middleware_lte_get_build_time (LteBusDevMiddlewareLte *object);
gchar *lte_bus_dev_middleware_lte_dup_build_time (LteBusDevMiddlewareLte *object);
void lte_bus_dev_middleware_lte_set_build_time (LteBusDevMiddlewareLte *object, const gchar *value);

const gchar *lte_bus_dev_middleware_lte_get_verison (LteBusDevMiddlewareLte *object);
gchar *lte_bus_dev_middleware_lte_dup_verison (LteBusDevMiddlewareLte *object);
void lte_bus_dev_middleware_lte_set_verison (LteBusDevMiddlewareLte *object, const gchar *value);

const gchar *lte_bus_dev_middleware_lte_get_hardware_model (LteBusDevMiddlewareLte *object);
gchar *lte_bus_dev_middleware_lte_dup_hardware_model (LteBusDevMiddlewareLte *object);
void lte_bus_dev_middleware_lte_set_hardware_model (LteBusDevMiddlewareLte *object, const gchar *value);

const gchar *lte_bus_dev_middleware_lte_get_iccid (LteBusDevMiddlewareLte *object);
gchar *lte_bus_dev_middleware_lte_dup_iccid (LteBusDevMiddlewareLte *object);
void lte_bus_dev_middleware_lte_set_iccid (LteBusDevMiddlewareLte *object, const gchar *value);

const gchar *lte_bus_dev_middleware_lte_get_phone_num (LteBusDevMiddlewareLte *object);
gchar *lte_bus_dev_middleware_lte_dup_phone_num (LteBusDevMiddlewareLte *object);
void lte_bus_dev_middleware_lte_set_phone_num (LteBusDevMiddlewareLte *object, const gchar *value);

guchar lte_bus_dev_middleware_lte_get_dial_status (LteBusDevMiddlewareLte *object);
void lte_bus_dev_middleware_lte_set_dial_status (LteBusDevMiddlewareLte *object, guchar value);

guchar lte_bus_dev_middleware_lte_get_cellular_status (LteBusDevMiddlewareLte *object);
void lte_bus_dev_middleware_lte_set_cellular_status (LteBusDevMiddlewareLte *object, guchar value);


/* ---- */

#define LTE_BUS_TYPE_DEV_MIDDLEWARE_LTE_PROXY (lte_bus_dev_middleware_lte_proxy_get_type ())
#define LTE_BUS_DEV_MIDDLEWARE_LTE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LTE_BUS_TYPE_DEV_MIDDLEWARE_LTE_PROXY, LteBusDevMiddlewareLteProxy))
#define LTE_BUS_DEV_MIDDLEWARE_LTE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), LTE_BUS_TYPE_DEV_MIDDLEWARE_LTE_PROXY, LteBusDevMiddlewareLteProxyClass))
#define LTE_BUS_DEV_MIDDLEWARE_LTE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), LTE_BUS_TYPE_DEV_MIDDLEWARE_LTE_PROXY, LteBusDevMiddlewareLteProxyClass))
#define LTE_BUS_IS_DEV_MIDDLEWARE_LTE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LTE_BUS_TYPE_DEV_MIDDLEWARE_LTE_PROXY))
#define LTE_BUS_IS_DEV_MIDDLEWARE_LTE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), LTE_BUS_TYPE_DEV_MIDDLEWARE_LTE_PROXY))

typedef struct _LteBusDevMiddlewareLteProxy LteBusDevMiddlewareLteProxy;
typedef struct _LteBusDevMiddlewareLteProxyClass LteBusDevMiddlewareLteProxyClass;
typedef struct _LteBusDevMiddlewareLteProxyPrivate LteBusDevMiddlewareLteProxyPrivate;

struct _LteBusDevMiddlewareLteProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  LteBusDevMiddlewareLteProxyPrivate *priv;
};

struct _LteBusDevMiddlewareLteProxyClass
{
  GDBusProxyClass parent_class;
};

GType lte_bus_dev_middleware_lte_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LteBusDevMiddlewareLteProxy, g_object_unref)
#endif

void lte_bus_dev_middleware_lte_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
LteBusDevMiddlewareLte *lte_bus_dev_middleware_lte_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
LteBusDevMiddlewareLte *lte_bus_dev_middleware_lte_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void lte_bus_dev_middleware_lte_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
LteBusDevMiddlewareLte *lte_bus_dev_middleware_lte_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
LteBusDevMiddlewareLte *lte_bus_dev_middleware_lte_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define LTE_BUS_TYPE_DEV_MIDDLEWARE_LTE_SKELETON (lte_bus_dev_middleware_lte_skeleton_get_type ())
#define LTE_BUS_DEV_MIDDLEWARE_LTE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LTE_BUS_TYPE_DEV_MIDDLEWARE_LTE_SKELETON, LteBusDevMiddlewareLteSkeleton))
#define LTE_BUS_DEV_MIDDLEWARE_LTE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), LTE_BUS_TYPE_DEV_MIDDLEWARE_LTE_SKELETON, LteBusDevMiddlewareLteSkeletonClass))
#define LTE_BUS_DEV_MIDDLEWARE_LTE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), LTE_BUS_TYPE_DEV_MIDDLEWARE_LTE_SKELETON, LteBusDevMiddlewareLteSkeletonClass))
#define LTE_BUS_IS_DEV_MIDDLEWARE_LTE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LTE_BUS_TYPE_DEV_MIDDLEWARE_LTE_SKELETON))
#define LTE_BUS_IS_DEV_MIDDLEWARE_LTE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), LTE_BUS_TYPE_DEV_MIDDLEWARE_LTE_SKELETON))

typedef struct _LteBusDevMiddlewareLteSkeleton LteBusDevMiddlewareLteSkeleton;
typedef struct _LteBusDevMiddlewareLteSkeletonClass LteBusDevMiddlewareLteSkeletonClass;
typedef struct _LteBusDevMiddlewareLteSkeletonPrivate LteBusDevMiddlewareLteSkeletonPrivate;

struct _LteBusDevMiddlewareLteSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  LteBusDevMiddlewareLteSkeletonPrivate *priv;
};

struct _LteBusDevMiddlewareLteSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType lte_bus_dev_middleware_lte_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LteBusDevMiddlewareLteSkeleton, g_object_unref)
#endif

LteBusDevMiddlewareLte *lte_bus_dev_middleware_lte_skeleton_new (void);


/* ---- */

#define LTE_BUS_TYPE_OBJECT (lte_bus_object_get_type ())
#define LTE_BUS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LTE_BUS_TYPE_OBJECT, LteBusObject))
#define LTE_BUS_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LTE_BUS_TYPE_OBJECT))
#define LTE_BUS_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), LTE_BUS_TYPE_OBJECT, LteBusObject))

struct _LteBusObject;
typedef struct _LteBusObject LteBusObject;
typedef struct _LteBusObjectIface LteBusObjectIface;

struct _LteBusObjectIface
{
  GTypeInterface parent_iface;
};

GType lte_bus_object_get_type (void) G_GNUC_CONST;

LteBusDevMiddlewareLte *lte_bus_object_get_dev_middleware_lte (LteBusObject *object);
LteBusDevMiddlewareLte *lte_bus_object_peek_dev_middleware_lte (LteBusObject *object);

#define LTE_BUS_TYPE_OBJECT_PROXY (lte_bus_object_proxy_get_type ())
#define LTE_BUS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LTE_BUS_TYPE_OBJECT_PROXY, LteBusObjectProxy))
#define LTE_BUS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), LTE_BUS_TYPE_OBJECT_PROXY, LteBusObjectProxyClass))
#define LTE_BUS_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), LTE_BUS_TYPE_OBJECT_PROXY, LteBusObjectProxyClass))
#define LTE_BUS_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LTE_BUS_TYPE_OBJECT_PROXY))
#define LTE_BUS_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), LTE_BUS_TYPE_OBJECT_PROXY))

typedef struct _LteBusObjectProxy LteBusObjectProxy;
typedef struct _LteBusObjectProxyClass LteBusObjectProxyClass;
typedef struct _LteBusObjectProxyPrivate LteBusObjectProxyPrivate;

struct _LteBusObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  LteBusObjectProxyPrivate *priv;
};

struct _LteBusObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType lte_bus_object_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LteBusObjectProxy, g_object_unref)
#endif

LteBusObjectProxy *lte_bus_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define LTE_BUS_TYPE_OBJECT_SKELETON (lte_bus_object_skeleton_get_type ())
#define LTE_BUS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LTE_BUS_TYPE_OBJECT_SKELETON, LteBusObjectSkeleton))
#define LTE_BUS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), LTE_BUS_TYPE_OBJECT_SKELETON, LteBusObjectSkeletonClass))
#define LTE_BUS_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), LTE_BUS_TYPE_OBJECT_SKELETON, LteBusObjectSkeletonClass))
#define LTE_BUS_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LTE_BUS_TYPE_OBJECT_SKELETON))
#define LTE_BUS_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), LTE_BUS_TYPE_OBJECT_SKELETON))

typedef struct _LteBusObjectSkeleton LteBusObjectSkeleton;
typedef struct _LteBusObjectSkeletonClass LteBusObjectSkeletonClass;
typedef struct _LteBusObjectSkeletonPrivate LteBusObjectSkeletonPrivate;

struct _LteBusObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  LteBusObjectSkeletonPrivate *priv;
};

struct _LteBusObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType lte_bus_object_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LteBusObjectSkeleton, g_object_unref)
#endif

LteBusObjectSkeleton *lte_bus_object_skeleton_new (const gchar *object_path);
void lte_bus_object_skeleton_set_dev_middleware_lte (LteBusObjectSkeleton *object, LteBusDevMiddlewareLte *interface_);

/* ---- */

#define LTE_BUS_TYPE_OBJECT_MANAGER_CLIENT (lte_bus_object_manager_client_get_type ())
#define LTE_BUS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LTE_BUS_TYPE_OBJECT_MANAGER_CLIENT, LteBusObjectManagerClient))
#define LTE_BUS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), LTE_BUS_TYPE_OBJECT_MANAGER_CLIENT, LteBusObjectManagerClientClass))
#define LTE_BUS_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), LTE_BUS_TYPE_OBJECT_MANAGER_CLIENT, LteBusObjectManagerClientClass))
#define LTE_BUS_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LTE_BUS_TYPE_OBJECT_MANAGER_CLIENT))
#define LTE_BUS_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), LTE_BUS_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _LteBusObjectManagerClient LteBusObjectManagerClient;
typedef struct _LteBusObjectManagerClientClass LteBusObjectManagerClientClass;
typedef struct _LteBusObjectManagerClientPrivate LteBusObjectManagerClientPrivate;

struct _LteBusObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  LteBusObjectManagerClientPrivate *priv;
};

struct _LteBusObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LteBusObjectManagerClient, g_object_unref)
#endif

GType lte_bus_object_manager_client_get_type (void) G_GNUC_CONST;

GType lte_bus_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void lte_bus_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *lte_bus_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *lte_bus_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void lte_bus_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *lte_bus_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *lte_bus_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __LTEBUS_H__ */
